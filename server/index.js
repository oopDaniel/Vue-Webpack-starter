/**
 *  This is a PRODUCTION SERVER containing all the static files
 *  among different modules
 *  Run `yarn run serve` to start this server
 *
 *  If you're trying to run a local dev server
 *  Run `yarn start` or `yarn run dev` instead
 */

process.env.NODE_ENV = 'production'

const express = require('express')
const http = require('http')
const path = require('path')
const helmet = require('helmet')


// Share `settings` among different modules
let settings
try {
  settings = require(path.resolve(__dirname, '..', './settings_local'))
} catch (e) {
  settings = require(path.resolve(__dirname, '..', './settings'))
}
process.env.settings = JSON.stringify(settings)


const app = express()
const port = process.env.PORT || '3000'


app.use(helmet())
app.use(helmet.contentSecurityPolicy({
  directives: {
    defaultSrc: ['*', "'self'"],
    scriptSrc: ['*', "'self'", "'unsafe-inline'", "'unsafe-eval'"],
    styleSrc: ['*', "'self'", "'unsafe-inline'"],
    imgSrc: ['*', 'data:']
  }
}))

// Routing, add the rest routing of static file
// generated by each submodule here
const redirects = require('./redirects')

app.use('/', redirects)
app.use(/\/app/, express.static('dist/vue-app'))
app.use(/\/app(\/.*)+/, express.static('dist/vue-app', {'extensions': ['html']}))

// 404
app.use((req, res, next) => {
  const err = new Error('Not Found')
  err.status = 404
  next(err)
})


// Create server
const server = http.createServer(app)
let retries = 10
createServer(port)

function createServer (port) {
  server.listen(port).on('error', err => {
    retries--
    if (retries === 0) throw new Error('Cannot find available port')

    if (err.code === 'EADDRINUSE') {
      console.log(` - ERROR: port is occupied, trying port <${port + 1}>`)
      createServer(port + 1)
    }
  })
  console.log(` - Server has inited, listening on port <${port}> now`)
}
